<?xml version="1.0" encoding="UTF-8"?>
<project name="phing-drupal" default="build" phingVersion="2.4.11">

  <!-- ### Load properties

Loads a set of project specific properties from a `.properties` file.

These properties contain information regarding the individual project and/or
environment such as which version of Drupal you are using, how to create a
database and the names of your custom modules.

All available properties are described and set to a default value in
[`build.default.properties`](https://raw.github.com/reload/phing-drupal-template/master/build.default.properties).
You should create your own properties file by copying the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project.

Both property files are loaded so your custom `build.properties` file should
only contain properties where you want to override the default value e.g. set
your custom module code prefix or use a special version of one of the build
tools. -->
  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
             `isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>
        <!-- By default Jenkins runs Phing from the directory containing the build
        file.  If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties.

        NB: This only works if the subdirectory is directly within the Drupal
        root directory. -->
        <if>
          <!-- If `build.properties` exists then assume we have a
               project root directory -->
          <available file="${project.basedir}/../build.properties"/>
          <then>
            <resolvepath propertyName="project.basedir"
                         file="${project.basedir}/../"/>
          </then>
        </if>

        <!-- By default use default properties file
             `build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
             Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
             directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
             directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

  <!-- ## Main targets -->

  <!-- ### Build project
  Do a complete build of the project by verifying code consistency and and
  performing static analysis of the code.
  This is the default build target.
  Do not run `docs` for now. Generating documentation eats up memory and build
  time and is largely obsolete when using GitHub. Add "docs" to depends, and
  include build.documentation.xml for documentation generation -->
  <target name="build" depends="init,
                                clean,
                                verify,
                                analyze" />

  <!-- ### Verify code consistency
  Make sure that our code is clean and functional. -->
  <target name="verify" depends="init,
                                 clean,
                                 lint-php-custom,
                                 lint-js-custom,
                                 lint-css-custom,
                                 check-php-debug,
                                 check-js-debug,
                                 simpletest"/>

  <!-- ### Analyze code
  Perform static analysis of the code to generate statistics, identify potential
  problems and opportunities for refactorings and make sure that the code
  complies with coding standards. -->
  <target name="analyze" depends="init,
                                  clean,
                                  phploc,
                                  phpmd,
                                  phpcpd">
    <!-- Moved inside target to support properties in target name -->
    <phingcall target="coder-review-d${drupal.version}">
      <!-- Run the target as if it was executed from the Drupal root
           directory. -->
      <property name="project.basedir" value="${project.drupal.dir}"/>
      <!-- We already have a clean environment so avoid further cleaning. -->
      <property name="project.cleaned" value="1"/>
      <!-- Make will run again as a part of the `init` target. We already have
           a working site so skip that. -->
      <property name="project.make.skip" value="1"/>
    </phingcall>
  </target>

  <!-- ### Generate documentation -->
  <import file="${phing.dir}/build.components/build.documentation.xml" />

  <!-- ## Individual targets
  These targets can be executed individually or grouped unless explicitly
  stated as a part of the task.
  **As a rule targets without descriptions should not be executed directly.** -->

  <!-- ### PHP, CSS, JS linting -->
  <import file="${phing.dir}/build.components/build.php_js_css_lint.xml" />

  <!-- ### PHP, JS Debug code detection -->
  <import file="${phing.dir}/build.components/build.debug_php_js.xml" />

  <!-- ### Detect code mess -->
  <import file="${phing.dir}/build.components/build.phpmd.xml" />

  <!-- ### Detect potential copy/pasting -->
  <import file="${phing.dir}/build.components/build.phpcpd.xml" />

  <!-- ### Generate code statistics -->
  <import file="${phing.dir}/build.components/build.phploc.xml" />

  <!-- ### Drupal Coder review -->
  <import file="${phing.dir}/build.components/build.drupal_coder_review.xml" />


  <!-- ### Review code using PHP_CodeSniffer -->
  <import file="${phing.dir}/build.components/build.php_codesniffer.xml" />

  <!-- ### Run simpletests -->
  <import file="${phing.dir}/build.components/build.simpletest.xml" />

  <!-- ## Helper targets
  These targets are used throughout the project and should normally not be
  executed directly.-->

  <!-- ### Initialization
  This target sets up many of the common resources used throughout the build.
  All other targets except dependencies for this target should depend on this
  unless specifically stated why. -->
  <target name="init"
          depends="load-properties, setup-dirs, make, setup-filesets"
          unless="project.initialized">
    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.initialized" value="true"/>
  </target>

  <!-- ### Load properties -->
  <import file="${phing.dir}/build.components/build.load_properties.xml" />

  <!-- ### Setup directories -->
  <import file="${phing.dir}/build.components/build.setup_dirs.xml" />

  <!-- ### Drush Make -->
  <import file="${phing.dir}/build.components/build.make.xml" />

  <!-- ### Setup file sets -->
  <import file="${phing.dir}/build.components/build.setup_filesets.xml" />

  <!-- ### Clean working environment  -->
  <import file="${phing.dir}/build.components/build.clean.xml" />

  <!-- ### Install a Drupal site -->
  <import file="${phing.dir}/build.components/build.drupal_site_install.xml" />

  <!-- ### Download and enable a project/module -->
  <import file="${phing.dir}/build.components/build.drupal_module_enable.xml" />

  <!-- HELPER TARGETS - clone a git repo, apply a patch, used by numerous targets-->
  <import file="${phing.dir}/build.components/build.helper_targets.xml" />

  <!-- ### Setup Phing Drush integration -->
  <import file="${phing.dir}/build.components/build.setup_phing_drush.xml" />

  <!-- ### Build documentation using Phrocco - appears to be a dead link??-->
  <import file="${phing.dir}/build.components/build.phrocco.xml" />

</project>